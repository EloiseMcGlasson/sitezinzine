# 🧱 STAGE 1 : Composer (PHP) dependencies
FROM php:8.3-cli AS composer_build

RUN apt-get update && apt-get install -y \
    libicu-dev zip git unzip libzip-dev && \
    docker-php-ext-install intl pdo pdo_mysql zip && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

WORKDIR /app

# ⏱️ Étape cache-friendly
COPY composer.json composer.lock ./
RUN composer install --no-dev --optimize-autoloader

# Ensuite seulement, copie le reste de ton code
COPY . .


# 🎨 STAGE 2 : Frontend (Yarn, Webpack Encore)
FROM node:18 AS frontend_build

WORKDIR /app

# ⏱️ Étape cache-friendly
COPY package.json yarn.lock webpack.config.js ./
RUN yarn install --frozen-lockfile

# Puis copie les fichiers assets
COPY assets ./assets

# 🌍 Production build
ENV NODE_ENV=production
RUN yarn build


# 🏁 STAGE 3 : Image finale
FROM php:8.3-apache

ARG APP_ENV=prod
ENV APP_ENV=${APP_ENV}

RUN apt-get update && apt-get install -y \
    libicu-dev zip git unzip libzip-dev && \
    docker-php-ext-install intl pdo pdo_mysql zip && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Apache config
RUN a2enmod rewrite
COPY ./docker/prod/apache/apache.conf /etc/apache2/sites-available/000-default.conf

WORKDIR /var/www/html

# ⬇️ Copie du code Symfony (sauf vendor et build)
COPY . .

# ⬇️ Copie des dépendances PHP
COPY --from=composer_build /app/vendor ./vendor

# ⬇️ Copie des assets Webpack compilés
COPY --from=frontend_build /app/public/build ./public/build

# 🔒 Permissions
RUN addgroup --system app && adduser --system --ingroup app appuser && \
    mkdir -p var && chown -R www-data:www-data var && \
    chown -R appuser:app /var/www/html

# 🔁 Entrypoint
COPY docker/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

USER appuser

ENTRYPOINT ["entrypoint.sh"]
CMD ["apache2-foreground"]
