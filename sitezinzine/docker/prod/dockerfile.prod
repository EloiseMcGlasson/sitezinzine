# üß± STAGE 1 : build avec Composer
FROM php:8.3-cli as composer_build

RUN apt-get update && apt-get install -y \
    libicu-dev zip git unzip libzip-dev && \
    docker-php-ext-install intl pdo pdo_mysql zip && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

WORKDIR /app

COPY . .

ARG APP_ENV=prod
ENV APP_ENV=${APP_ENV}

# Installation sans les d√©pendances de dev, et optimis√©e pour prod
RUN composer install --no-dev --optimize-autoloader


# üèÅ STAGE 2 : image de production
FROM php:8.3-apache

ARG APP_ENV=prod
ENV APP_ENV=${APP_ENV}

RUN apt-get update && apt-get install -y \
    libicu-dev zip git unzip libzip-dev && \
    docker-php-ext-install intl pdo pdo_mysql zip && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

RUN a2enmod rewrite

# Configuration Apache
COPY ./docker/prod/apache/apache.conf /etc/apache2/sites-available/000-default.conf


WORKDIR /var/www/html

# Copie du code de l'app (sauf vendor, qu'on copie plus bas)
COPY . .

# Copie les vendor optimis√©s depuis le build
COPY --from=composer_build /app/vendor ./vendor

# ‚úÖ Cr√©e un utilisateur non-root pour la s√©curit√©
RUN addgroup --system app && adduser --system --ingroup app appuser

# ‚úÖ S'assure que les permissions sont OK AVANT de switcher d'utilisateur
RUN mkdir -p var && chown -R www-data:www-data var && \
    chown -R appuser:app /var/www/html

# Entrypoint
COPY docker/entrypoint.sh /usr/local/bin/entrypoint.sh

# Ex√©cute les commandes suivantes en tant appuser
USER appuser

ENTRYPOINT ["entrypoint.sh"]
CMD ["apache2-foreground"]
