<?php

namespace App\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Repository\EmissionRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints\Positive;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Serializer\Annotation\Groups;
use Vich\UploaderBundle\Mapping\Annotation as Vich;



#[ORM\Entity(repositoryClass: EmissionRepository::class)]
#[ORM\Table(name: 'emission')]
#[ORM\Index(name: 'idx_emission_user', columns: ['user_id'])]
#[ORM\Index(name: 'idx_emission_url', columns: ['url'])]
#[ORM\Index(name: 'idx_emission_titre', columns: ['titre'])]
#[ORM\Index(name: 'idx_emission_theme', columns: ['theme_id'])]
#[ORM\Index(name: 'idx_emission_categorie', columns: ['categorie_id'])]
#[Vich\Uploadable()]
class Emission
{
    /**
     * @var int|null
     * This field is the unique identifier for the Emission entity.
     * It is automatically generated by the database.
     * It is used to reference the emission in other entities and in the database.
     */
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    #[Groups(['emissions.index', 'emissions.lastemissions'])]
    private ?int $id = null;

    /**
     * @var string
     * This field is the title of the emission.
     * It is used to display the emission in lists and detail views.
     * It is required and has a maximum length of 250 characters.
     */
    #[Groups(['emissions.index', 'emissions.create', 'emissions.lastemissions'])]
    #[ORM\Column(length: 250)]
    private string $titre = '';

    /**
     * @var string|null
     * This field is used for keywords related to the emission.
     * It is optional and has a maximum length of 250 characters.
     * It can be used for search and filtering purposes.
     * deprecated: This field is deprecated and will change its name in future versions.
     */
    #[Groups(['emissions.index', 'emissions.create'])]
    #[ORM\Column(length: 250)]
    private ?string $keyword = null;

    /**
     * @var \DateTimeInterface|null
     * This field is used to store the publication date of the emission.
     * It is required and must be a valid datetime.
     * It is used to sort emissions by publication date.
     */
    #[Groups(['emissions.index', 'emissions.lastemissions'])]
    #[ORM\Column(type: Types::DATETIME_MUTABLE)]
    private ?\DateTimeInterface $datepub = null;

    /**
     * @var string|null
     * This field is used to store a reference radio animator for the emission.
     * It is required and has a maximum length of 250 characters.
     */
    #[ORM\Column(length: 250, nullable: false)]
    #[Groups(['emissions.index', 'emissions.create'])]
    private ?string $ref = null;

    /**
     * @var int|null
     * This field is used to store the duration of the emission in minutes.
     * It is required and must be a positive integer less than 240.
     * It is used to display the duration of the emission in lists and detail views.
     */
    #[ORM\Column]
    #[Positive()]
    #[Assert\NotBlank()]
    #[Assert\LessThan(value: 240)]
    #[Groups(['emissions.index', 'emissions.create', 'emissions.lastemissions'])]
    private ?int $duree = null;

    /**
     * @var string|null
     * This field is used to store the URL of the Mp3 broadcast.
     * It is optional and has a maximum length of 250 characters.
     * It can be used to listen to the show on the website.
     */
    #[ORM\Column(length: 250, nullable: true)]
    //#[Assert\Url(message: 'This value is not a valid URL')]
    #[Groups(['emissions.index', 'emissions.create', 'emissions.lastemissions'])]
    private ?string $url = null;

    /**
     * @var string
     * This field is used to store a description of the emission.
     * It is required and can be used to provide additional information about the emission.
     * It has no maximum length, allowing for detailed descriptions.
     */
    #[ORM\Column(type: Types::TEXT)]
    #[Groups(['emissions.index', 'emissions.create', 'emissions.lastemissions'])]
    private string $descriptif = '';

    /**
     * @var Categories|null
     * This field is used to store the category of the emission.
     * It is a many-to-one relationship with the Categories entity.
     * It is used to group emissions by category for filtering and display purposes.
     */
    #[ORM\ManyToOne(inversedBy: 'emissions', cascade: ['persist'])]
    #[Groups(['emissions.index', 'emissions.create'])]
    private ?Categories $categorie = null;

    /**
     * @var string|null
     * This field is used to store the thumbnail image of the emission.
     * It is optional and has a maximum length of 255 characters.
     * It can be used to display an image of the programme in lists and detailed views.
     */
    #[ORM\Column(length: 255, nullable: true)]
    #[Groups(['emissions.index', 'emissions.create'])]
    private ?string $thumbnail = null;

    /**
     * @var File|null
     * This field is used to store the thumbnail image file of the emission.
     * It is optional and can be used to upload a new image for the programme.
     * It is managed by VichUploaderBundle and has validation constraints for image dimensions.
     */
    #[Vich\UploadableField(mapping: 'emissions', fileNameProperty: 'thumbnail')]
    #[Assert\Image(
        maxWidth: 650,
        maxHeight: 500,
    )]
    #[Groups(['emissions.index', 'emissions.create'])]
    private ?File $thumbnailFile = null;

    /**
     * @var string|null
     * This field is used to store the programme file in MP3 format.
     * It is optional and has a maximum length of 255 characters.
     * It can be used to upload the programme file in MP3 format..
     */
    #[Groups(['emissions.index', 'emissions.create'])]
    #[ORM\Column(length: 255, nullable: true)]
    private ?string $thumbnailMp3 = null;

    /**
     * @var File|null
     * This field is used to store the thumbnail file of the emission in MP3 format.
     * It is optional and can be used to upload a new file for the programme in MP3 format.
     * It is managed by VichUploaderBundle and has validation constraints for file type.
     */
    #[Vich\UploadableField(mapping: 'emissionsMp3', fileNameProperty: 'thumbnailMp3')]
    #[Assert\File(
        extensions: ['mp3'],
        extensionsMessage: 'Please upload a valid mp3',
    )]
    #[Groups(['emissions.index', 'emissions.create'])]
    private ?File $thumbnailFileMp3 = null;

    /**
     * @var \DateTime|null
     * This field is used to store the last update date of the emission.
     * It is automatically set when the thumbnail file is updated.
     * It is used to track changes to the emission.
     */
    #[ORM\Column(type: Types::DATETIME_MUTABLE, nullable: true)]
    #[Groups(['emissions.index'])]
    private ?\DateTime $updatedat = null;

    /**
     * @var Theme|null
     * This field is used to store the theme of the emission.
     * It is a many-to-one relationship with the Theme entity.
     * It is used to group emissions by theme for filtering and display purposes.
     */
    #[ORM\ManyToOne(inversedBy: 'emissions')]
    private ?Theme $theme = null;

    /**
     * @var User|null
     * This field is used to store the user who created the emission.
     * It is a many-to-one relationship with the User entity.
     * It is used to track the creator of the emission for administrative purposes.
     */
    #[ORM\ManyToOne(inversedBy: 'emissions')]
    private ?User $user = null;

    /**
     * @var Editeur|null
     * This field is used to store the editor of the emission.
     * It is a many-to-one relationship with the Editeur entity.
     * It is used to track the editor responsible for the emission.
     */
    #[ORM\ManyToOne(inversedBy: 'emissions')]
    #[ORM\JoinColumn(nullable: true)]
    private ?Editeur $editeur = null;

    /**
     * @var Collection<int, InviteOldAnimateur>
     * This field is used to store the old animators invited to the emission.
     * It is a many-to-many relationship with the InviteOldAnimateur entity.
     * It is used to track the animators who participated in the emission.
     * It is inversed by the 'emissions' field in the InviteOldAnimateur entity.
     * It is used to display the list of animators in the emission detail view.
     * It is initialized as an empty collection in the constructor.
     * It is used to manage the relationship between emissions and animators.
     */
    #[ORM\ManyToMany(targetEntity: InviteOldAnimateur::class, inversedBy: 'emissions')]
    private Collection $InviteOldAnimateurs;

    /**
     * @var Collection<int, Diffusion>
     * This field is used to store the diffusions of the emission.
     * It is a one-to-many relationship with the Diffusion entity.
     * It is used to track the diffusions of the emission.
     * It is inversed by the 'emission' field in the Diffusion entity.
     * It is used to display the list of diffusions in the emission detail view.
     * It is initialized as an empty collection in the constructor.
     * It is used to manage the relationship between emissions and diffusions.
     * It has an orphan removal policy, meaning that if a diffusion is removed from the emission,
     * it will be deleted from the database.
     * It has a cascade persist option, meaning that if a diffusion is added to the emission,
     * it will be persisted to the database automatically.
     */
    #[ORM\OneToMany(mappedBy: 'emission', targetEntity: Diffusion::class, orphanRemoval: true, cascade: ['persist'])]
    private Collection $diffusions;
    
    /**
     * @var \DateTimeInterface|null
     * This field is used to store the last diffusion date of the emission.
     * It is nullable to allow for emissions that have not been diffused yet.
     * It is updated whenever a new diffusion is added.
     * not implemented in the database schema, but can be used in business logic.
     */
    #[Groups(['emissions.index', 'emissions.lastemissions'])]
    private ?\DateTimeInterface $lastDiffusion = null;

    /**
     * @var \DateTimeInterface|null
     *  This field is used to store the next scheduled diffusion date of the emission.
     * It is nullable to allow for emissions that do not have a next diffusion scheduled.
     * It is updated whenever a new diffusion is added or when the next diffusion date is set.
     * not implemented in the database schema, but can be used in business logic.
     */
    #[Groups(['emissions.index', 'emissions.lastemissions'])]
    private ?\DateTimeInterface $nextDiffusion = null;



    /**
     * Emission constructor.
     * Initializes the collections for InviteOldAnimateurs and diffusions.
     * This ensures that these collections are always ready to be used without needing to check for null.
     */
    public function __construct()
    {
        $this->InviteOldAnimateurs = new ArrayCollection();
        $this->diffusions = new ArrayCollection();
    }


    /**
     * Get the unique identifier of the emission.
     *
     * @return int|null The ID of the emission.
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Get the title of the emission.
     *
     * @return string The title of the emission.
     */
    public function getTitre(): string
    {
        return $this->titre;
    }

    /**
     * Set the title of the emission.
     *
     * @param string $titre The title to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setTitre(string $titre): static
    {
        $this->titre = $titre;

        return $this;
    }
    /**
     * Get the keyword associated with the emission.
     *
     * @return string|null The keyword of the emission, or null if not set.
     */
    public function getKeyword(): ?string
    {
        return $this->keyword;
    }

    /**
     * Set the keyword for the emission.
     *
     * @param string $keyword The keyword to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setKeyword(string $keyword): static
    {
        $this->keyword = $keyword;

        return $this;
    }

    /**
     * Get the publication date of the emission.
     *
     * @return \DateTimeInterface|null The publication date, or null if not set.
     */
    public function getDatepub(): ?\DateTimeInterface
    {
        return $this->datepub;
    }

    /**
     * Set the publication date of the emission.
     *
     * @param \DateTimeInterface $datepub The publication date to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setDatepub(\DateTimeInterface $datepub): static
    {
        $this->datepub = $datepub;

        return $this;
    }

    /**
     * Get the reference of the emission.
     *
     * @return string|null The reference of the emission, or null if not set.
     */
    public function getRef(): ?string
    {
        return $this->ref;
    }

    /**
     * Set the reference of the emission.
     *
     * @param string $ref The reference to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setRef(string $ref): static
    {
        $this->ref = $ref;

        return $this;
    }


    /**
     * Get the duration of the emission in minutes.
     *
     * @return int|null The duration in minutes, or null if not set.
     */
    public function getDuree(): ?int
    {
        return $this->duree;
    }

    /**
     * Set the duration of the emission in minutes.
     *
     * @param int $duree The duration to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setDuree(int $duree): static
    {
        $this->duree = $duree;

        return $this;
    }

    /**
     * Get the URL of the emission.
     *
     * @return string|null The URL of the emission, or null if not set.
     */
    public function getUrl(): ?string
    {
        return $this->url;
    }

    /**
     * Set the URL of the emission.
     *
     * @param string $url The URL to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setUrl(string $url): static
    {
        $this->url = $url;

        return $this;
    }

    /**
     * Get the description of the emission.
     *
     * @return string The description of the emission.
     */
    public function getDescriptif(): string
    {
        return $this->descriptif;
    }

    /**
     * Set the description of the emission.
     *
     * @param string $descriptif The description to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setDescriptif(string $descriptif): static
    {
        $this->descriptif = $descriptif;

        return $this;
    }

    /**
     * Get the category of the emission.
     *
     * @return Categories|null The category of the emission, or null if not set.
     */
    public function getCategorie(): ?Categories
    {
        return $this->categorie;
    }

    /**
     * Set the category of the emission.
     *
     * @param Categories|null $categorie The category to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setCategorie(?Categories $categorie): static
    {
        $this->categorie = $categorie;

        return $this;
    }

    /**
     * Get the thumbnail of the emission.
     *
     * @return string|null The thumbnail of the emission, or null if not set.
     */
    public function getThumbnail(): ?string
    {
        return $this->thumbnail;
    }

    /**
     * Set the thumbnail of the emission.
     *
     * @param string|null $thumbnail The thumbnail to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setThumbnail(?string $thumbnail): static
    {
        $this->thumbnail = $thumbnail !== null ? trim($thumbnail) : null;

        return $this;
    }

    /**
     * Get the thumbnail file of the emission.
     *
     * @return File|null The thumbnail file, or null if not set.
     */
    public function getThumbnailFile(): ?File
    {
        return $this->thumbnailFile;
    }

    /**
     * Set the thumbnail file of the emission.
     *
     * @param File|null $thumbnailFile The thumbnail file to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setThumbnailFile(?File $thumbnailFile): static
    {
        $this->thumbnailFile = $thumbnailFile;

        if (null !== $thumbnailFile) {
            // It is required that at least one field changes if you are using doctrine
            // otherwise the event listeners won't be called and the file is lost
            $this->updatedat = new \DateTime();
        }

        return $this;
    }

    /**
     * Get the last update date of the emission.
     *
     * @return \DateTime|null The last update date, or null if not set.
     */
    public function getUpdatedat(): ?\DateTime
    {
        return $this->updatedat;
    }

    /**
     * Set the last update date of the emission.
     *
     * @param \DateTime|null $updatedat The last update date to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setUpdatedat(?\DateTime $updatedat): static
    {
        $this->updatedat = $updatedat;

        return $this;
    }

    /**
     * Get the theme of the emission.
     *
     * @return Theme|null The theme of the emission, or null if not set.
     */
    public function getTheme(): ?Theme
    {
        return $this->theme;
    }

    /**
     * Set the theme of the emission.
     *
     * @param Theme|null $theme The theme to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setTheme(?Theme $theme): static
    {
        $this->theme = $theme;

        return $this;
    }

    /**
     * Get the user who created the emission.
     *
     * @return User|null The user who created the emission, or null if not set.
     */
    public function getUser(): ?User
    {
        return $this->user;
    }

    /**
     * Set the user who created the emission.
     *
     * @param User|null $user The user to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setUser(?User $user): static
    {
        $this->user = $user;

        return $this;
    }

    /**
     * Get the editor of the emission.
     *
     * @return Editeur|null The editor of the emission, or null if not set.
     */
    public function getEditeur(): ?Editeur
    {
        return $this->editeur;
    }

    /**
     * Set the editor of the emission.
     *
     * @param Editeur|null $editeur The editor to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setEditeur(?Editeur $editeur): static
    {
        $this->editeur = $editeur;

        return $this;
    }

    /**
     * @return Collection<int, InviteOldAnimateur>
     * This method returns the collection of old animators invited to the emission.
     * It is used to manage the relationship between emissions and old animators.
     * It is used to display the list of animators in the emission detail view.
     * It is initialized as an empty collection in the constructor.
     */
    public function getInviteOldAnimateurs(): Collection
    {
        return $this->InviteOldAnimateurs;
    }

    /**
     * Add an old animator to the emission.
     *
     * @param InviteOldAnimateur $InviteOldAnimateur The old animator to add.
     * @return static Returns the current instance for method chaining.
     */
    public function addInviteOldAnimateur(InviteOldAnimateur $InviteOldAnimateur): static
    {
        if (!$this->InviteOldAnimateurs->contains($InviteOldAnimateur)) {
            $this->InviteOldAnimateurs->add($InviteOldAnimateur);
        }

        return $this;
    }

    /**
     * Remove an old animator from the emission.
     *
     * @param InviteOldAnimateur $InviteOldAnimateur The old animator to remove.
     * @return static Returns the current instance for method chaining.
     */
    public function removeInviteOldAnimateur(InviteOldAnimateur $InviteOldAnimateur): static
    {
        $this->InviteOldAnimateurs->removeElement($InviteOldAnimateur);

        return $this;
    }

    /**
     * Get the thumbnail MP3 of the emission.
     *
     * @return string|null The thumbnail MP3 of the emission, or null if not set.
     */
    public function getThumbnailMp3(): ?string
    {
        return $this->thumbnailMp3;
    }

    /**
     * Set the thumbnail MP3 of the emission.
     *
     * @param string|null $thumbnailMp3 The thumbnail MP3 to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setThumbnailMp3(?string $thumbnailMp3): static
    {
        $this->thumbnailMp3 = $thumbnailMp3;

        return $this;
    }



    /**
     * Get the value of thumbnailFileMp3
     *
     * @return File|null
     * This method returns the thumbnail file in MP3 format.
     * It is used to manage the file upload for the programme in MP3 format.
     */
    public function getThumbnailFileMp3(): ?File
    {
        return $this->thumbnailFileMp3;
    }

    /**
     * Set the value of thumbnailFileMp3
     *
     * @return  self
     */
    public function setThumbnailFileMp3($thumbnailFileMp3): static
    {
        $this->thumbnailFileMp3 = $thumbnailFileMp3;

        return $this;
    }


    /**
     * @return Collection<int, Diffusion>
     * This method returns the collection of diffusions associated with the emission.
     * It is used to manage the relationship between emissions and diffusions.
     * It is used to display the list of diffusions in the emission detail view.
     * It is initialized as an empty collection in the constructor.
     */
    public function getDiffusions(): Collection
    {
        return $this->diffusions;
    }

    /**
     * Add a diffusion to the emission.
     *
     * @param Diffusion $diffusion The diffusion to add.
     * @return static Returns the current instance for method chaining.
     */
    public function addDiffusion(Diffusion $diffusion): static
    {
        if (!$this->diffusions->contains($diffusion)) {
            $this->diffusions->add($diffusion);
            $diffusion->setEmission($this);
        }

        return $this;
    }

    /**
     * Remove a diffusion from the emission.
     *
     * @param Diffusion $diffusion The diffusion to remove.
     * @return static Returns the current instance for method chaining.
     */
    public function removeDiffusion(Diffusion $diffusion): static
    {
        if ($this->diffusions->removeElement($diffusion)) {
            // set the owning side to null (unless already changed)
            if ($diffusion->getEmission() === $this) {
                $diffusion->setEmission(null);
            }
        }

        return $this;
    }

    /**
     * Get the last diffusion date of the emission.
     *
     * @return \DateTimeInterface|null The last diffusion date, or null if not set.
     */
    public function getLastDiffusion(): ?\DateTimeInterface
    {
        return $this->lastDiffusion;
    }

    /**
     * Set the last diffusion date of the emission.
     *
     * @param \DateTimeInterface|null $date The last diffusion date to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setLastDiffusion(?\DateTimeInterface $date): static
    {
        $this->lastDiffusion = $date;
        return $this;
    }


    /**
     * Get the last diffusion date of the emission.
     * This method retrieves the most recent diffusion date from the collection of diffusions.
     * It filters out diffusions without a valid horaireDiffusion and returns the latest one.
     *
     * @return \DateTimeInterface|null The last diffusion date, or null if no valid diffusions exist.
     */
   public function getDerniereDiffusion(): ?\DateTimeInterface
{
    $diffusions = $this->getDiffusions()->filter(function (Diffusion $d) {
        return $d->getHoraireDiffusion() !== null;
    })->toArray();

    if (empty($diffusions)) {
        return null;
    }

    usort($diffusions, fn($a, $b) => $b->getHoraireDiffusion() <=> $a->getHoraireDiffusion());

    return $diffusions[0]->getHoraireDiffusion();
}


    /**
     * Get the next diffusion date of the emission.
     *
     * @return \DateTimeInterface|null The next diffusion date, or null if not set.
     */
    public function getNextDiffusion(): ?\DateTimeInterface
    {
        return $this->nextDiffusion;
    }

    /**
     * Set the next diffusion date of the emission.
     *
     * @param \DateTimeInterface|null $date The next diffusion date to set.
     * @return static Returns the current instance for method chaining.
     */
    public function setNextDiffusion(?\DateTimeInterface $date): static
    {
        $this->nextDiffusion = $date;
        return $this;
    }
}
